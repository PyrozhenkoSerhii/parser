{"version":3,"sources":["../src/lexer.js"],"names":["isDivider","char","dividerRegex","test","lexer","code","fs","readFileSync","process","env","FILE_PATH","toString","lines","split","map","line","sequenceList","forEach","lineIndex","buffer","tokens","SEMICOLON","push","value","foundTokens","sequence","matchedToken","Object","entries","tokenId","tokenRegex","type","lexeme","console","table"],"mappings":";;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAU;AAC1B,MAAMC,YAAY,GAAG,aAArB;AACA,SAAOA,YAAY,CAACC,IAAb,CAAkBF,KAAlB,CAAP;AACD,CAHD;;AAKA,IAAMG,KAAK,GAAI,YAAM;AACnB,MAAMC,IAAI,GAAGC,eAAGC,YAAH,CAAgBC,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyB,qBAAzC,EAAgEC,QAAhE,EAAb;;AACA,MAAMC,KAAK,GAAGP,IAAI,CAACQ,KAAL,CAAW,IAAX,EAAiBC,GAAjB,CAAqB,UAACC,IAAD,EAAU;AAC3C,qBAAUA,IAAV;AACD,GAFa,CAAd;AAGA,MAAMC,YAAY,GAAG,EAArB;AAEAJ,EAAAA,KAAK,CAACK,OAAN,CAAc,UAACF,IAAD,EAAOG,SAAP,EAAqB;AACjC,QAAIC,MAAM,GAAG,EAAb;;AACA,uBAAIJ,IAAJ,EAAUE,OAAV,CAAkB,UAAChB,MAAD,EAAU;AAC1B,UAAImB,eAAOC,SAAP,CAAiBlB,IAAjB,CAAsBF,MAAtB,CAAJ,EAAiC;AAC/Be,QAAAA,YAAY,CAACM,IAAb,CAAkB;AAAEP,UAAAA,IAAI,EAAEG,SAAR;AAAmBK,UAAAA,KAAK,EAAEJ;AAA1B,SAAlB;AACAH,QAAAA,YAAY,CAACM,IAAb,CAAkB;AAAEP,UAAAA,IAAI,EAAEG,SAAR;AAAmBK,UAAAA,KAAK,EAAEtB;AAA1B,SAAlB;AACAkB,QAAAA,MAAM,GAAG,EAAT;AACD,OAJD,MAKK,IAAI,CAACnB,SAAS,CAACC,MAAD,CAAd,EAAsB;AACzBkB,QAAAA,MAAM,aAAMA,MAAN,SAAelB,MAAf,CAAN;AACD,OAFI,MAEE;AACL,YAAIkB,MAAJ,EAAY;AACVH,UAAAA,YAAY,CAACM,IAAb,CAAkB;AAAEP,YAAAA,IAAI,EAAEG,SAAR;AAAmBK,YAAAA,KAAK,EAAEJ;AAA1B,WAAlB;AACAA,UAAAA,MAAM,GAAG,EAAT;AACD;AACF;AACF,KAdD;AAeD,GAjBD;AAoBA,MAAMK,WAAW,GAAG,EAApB;AACAR,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAACQ,QAAD,EAAc;AACjC,QAAIC,YAAY,GAAG,EAAnB;AACAC,IAAAA,MAAM,CAACC,OAAP,CAAeR,cAAf,EAAuBH,OAAvB,CAA+B,gBAA2B;AAAA;AAAA,UAAzBY,OAAyB;AAAA,UAAhBC,UAAgB;;AACxD,UAAIA,UAAU,CAAC3B,IAAX,CAAgBsB,QAAQ,CAACF,KAAzB,CAAJ,EAAqC;AACnCG,QAAAA,YAAY,GAAGG,OAAf;AACD;AACF,KAJD;AAMAL,IAAAA,WAAW,CAACF,IAAZ,CAAiB;AACfP,MAAAA,IAAI,EAAEU,QAAQ,CAACV,IADA;AAEfgB,MAAAA,IAAI,EAAEL,YAAY,IAAI,qCAFP;AAGfM,MAAAA,MAAM,EAAEP,QAAQ,CAACF;AAHF,KAAjB;AAKD,GAbD;AAeAU,EAAAA,OAAO,CAACC,KAAR,CAAcV,WAAd;AACD,CA5Ca,EAAd","sourcesContent":["import fs from \"fs\";\nimport { tokens } from \"./tokens\"\n\nconst isDivider = (char) => {\n  const dividerRegex = /(\\n|\\s+|\\t)/;\n  return dividerRegex.test(char);\n}\n\nconst lexer = (() => {\n  const code = fs.readFileSync(process.env.FILE_PATH || '../tests/test1.lang').toString();\n  const lines = code.split(\"\\n\").map((line) => {\n    return `${line}\\n`\n  });\n  const sequenceList = [];\n\n  lines.forEach((line, lineIndex) => {\n    let buffer = '';\n    [...line].forEach((char) => {\n      if (tokens.SEMICOLON.test(char)) {\n        sequenceList.push({ line: lineIndex, value: buffer });\n        sequenceList.push({ line: lineIndex, value: char });\n        buffer = '';\n      }\n      else if (!isDivider(char)) {\n        buffer = `${buffer}${char}`;\n      } else {\n        if (buffer) {\n          sequenceList.push({ line: lineIndex, value: buffer });\n          buffer = '';\n        }\n      }\n    })\n  })\n\n\n  const foundTokens = [];\n  sequenceList.forEach((sequence) => {\n    let matchedToken = '';\n    Object.entries(tokens).forEach(([tokenId, tokenRegex]) => {\n      if (tokenRegex.test(sequence.value)) {\n        matchedToken = tokenId;\n      }\n    })\n\n    foundTokens.push({\n      line: sequence.line,\n      type: matchedToken || \"SyntaxError: Unexpected indentifier\",\n      lexeme: sequence.value,\n    })\n  })\n\n  console.table(foundTokens)\n})();\n\n"],"file":"lexer.js"}